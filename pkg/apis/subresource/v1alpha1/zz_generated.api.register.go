/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by apiregister-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/kubrid/apiserver/pkg/apis/subresource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/generic"
	"k8s.io/apiserver/pkg/registry/rest"
	"sigs.k8s.io/apiserver-builder-alpha/pkg/builders"
)

func addKnownTypes(scheme *runtime.Scheme) error {
	// TODO this will get cleaned up with the scheme types are fixed
	scheme.AddKnownTypes(SchemeGroupVersion,
		&VirtualMachineInstance{},
		&VirtualMachineInstanceList{},
		&VirtualMachineInstancePoweraction{},
	)
	return nil
}

var (
	ApiVersion = builders.NewApiVersion("subresource.core.kubrid.io", "v1alpha1").WithResources(
		subresource.SubresourceVirtualMachineInstanceStorage,
		builders.NewApiResource( // Resource status endpoint
			subresource.InternalVirtualMachineInstanceStatus,
			func() runtime.Object { return &VirtualMachineInstance{} },     // Register versioned resource
			func() runtime.Object { return &VirtualMachineInstanceList{} }, // Register versioned resource list
			&subresource.VirtualMachineInstanceStatusStrategy{DefaultStatusStorageStrategy: builders.StatusStorageStrategySingleton},
		), builders.NewApiResourceWithStorage(
			subresource.InternalVirtualMachineInstancePoweractionREST,
			func() runtime.Object { return &VirtualMachineInstancePoweraction{} }, // Register versioned resource
			nil,
			func(generic.RESTOptionsGetter) rest.Storage {
				return &subresource.VirtualMachineInstancePoweractionREST{Registry: subresource.NewVirtualMachineInstanceRegistry(subresource.SubresourceVirtualMachineInstanceStorage)}
			},
		),
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
		RegisterConversions,
		addKnownTypes,
		func(scheme *runtime.Scheme) error {
			metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
			return nil
		},
	}).AddToScheme

	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type VirtualMachineInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMachineInstance `json:"items"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type VirtualMachineInstancePoweractionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMachineInstancePoweraction `json:"items"`
}
