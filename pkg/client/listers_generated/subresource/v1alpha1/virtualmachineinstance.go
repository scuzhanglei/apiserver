/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubrid/apiserver/pkg/apis/subresource/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineInstanceLister helps list VirtualMachineInstances.
type VirtualMachineInstanceLister interface {
	// List lists all VirtualMachineInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineInstance, err error)
	// Get retrieves the VirtualMachineInstance from the index for a given name.
	Get(name string) (*v1alpha1.VirtualMachineInstance, error)
	VirtualMachineInstanceListerExpansion
}

// virtualMachineInstanceLister implements the VirtualMachineInstanceLister interface.
type virtualMachineInstanceLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineInstanceLister returns a new VirtualMachineInstanceLister.
func NewVirtualMachineInstanceLister(indexer cache.Indexer) VirtualMachineInstanceLister {
	return &virtualMachineInstanceLister{indexer: indexer}
}

// List lists all VirtualMachineInstances in the indexer.
func (s *virtualMachineInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineInstance))
	})
	return ret, err
}

// Get retrieves the VirtualMachineInstance from the index for a given name.
func (s *virtualMachineInstanceLister) Get(name string) (*v1alpha1.VirtualMachineInstance, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachineinstance"), name)
	}
	return obj.(*v1alpha1.VirtualMachineInstance), nil
}
